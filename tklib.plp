/* The Project Programming Language - PLP
 The Second Release on PLP Language -> PLPv2b
 BSD License
 Time: 21/08/01 00:00 GMT
*/

//TCL/TK Library for PLP language

IMPORT


FILE * tk;

function (out reset)
	tk = fopen("Tk.tcl", "w+");
	fputs("",tk);
	fclose(tk);
ends

function (out exec,fix $ * system)
	tk = fopen("Tk.tcl", "a+");
	fputs("exec ", tk);
	fputs(system, tk);
	fputs("\n", tk);
	fclose(tk);
ends

function (out proc,fix $ * func,fix $ * commands)
	tk = fopen("Tk.tcl", "a+");
	fputs("proc ", tk);
	fputs(func, tk);
	fputs(" {\n", tk);
	fputs(commands, tk);
	fputs("\n} \n", tk);
	fclose(tk);
ends

function (in title,fix $ * system)
	tk = fopen("Tk.tcl", "a+");
	fputs("wm title . \"", tk);
	fputs(system, tk);
	fputs("\"\n", tk);
	fclose(tk);
	return 0;
ends

function (in icon,fix $ * system)
	tk = fopen("Tk.tcl", "a+");
	fputs("wm iconbitmap . ", tk);
	fputs(system, tk);
	fputs("\n", tk);
	fclose(tk);
	return 0;
ends

function (in closewindow,fix $ * system)
	tk = fopen("Tk.tcl", "a+");
	fputs("wm protocol . WM_DELETE_WINDOW ", tk);
	fputs(system, tk);
	fputs("\n", tk);
	fclose(tk);
	return 0;
ends

function (in canvas,fix $ * id,fix $ * background,in width,in height)
	$ buffer[256];
	tk = fopen("Tk.tcl", "a+");
	fputs("canvas ", tk);
	fputs(id, tk);
	fputs(" -background ",tk);
	fputs(background,tk);
	fputs(" -width ", tk);
	itoa(width,buffer,10);
	fputs(buffer, tk);
	fputs(" -height ", tk);
	itoa(height,buffer,10);
	fputs(buffer, tk);
	fputs(" \npack ", tk);
	fputs(id, tk);
	fputs("\n", tk);
	fclose(tk);
	return 0;
ends

function (in id,fix $ * id,fix $ * system)
	tk = fopen("Tk.tcl", "a+");
	fputs(id, tk);
	fputs(" ", tk);
	fputs(system, tk);
	fputs("\n", tk);
	fclose(tk);
	return 0;
ends

function (in button,fix $ * id,fix $ * command,in padx,in pady,fix $ * txt)
	tk = fopen("Tk.tcl", "a+");
	$ buffer[256];
	fputs("button ", tk);
	fputs(id, tk);
	fputs(" -command {", tk);
	fputs(command, tk);
	fputs("} -padx ", tk);
	itoa(padx,buffer,10);
	fputs(buffer, tk);
	fputs(" -pady ", tk);
	itoa(pady,buffer,10);
	fputs(buffer, tk);
	fputs(" -text \"", tk);
	fputs(txt, tk);
	fputs("\" \npack ", tk);
	fputs(id, tk);
	fputs("\n", tk);
	fclose(tk);
	return 0;
ends

function (in messageBox,fix $ * type,fix $ * icon,fix $ * title,fix $ * message)
	tk = fopen("Tk.tcl", "a+");
	fputs("tk_messageBox -type ", tk);
	fputs(type,tk);
	fputs(" -icon ", tk);
	fputs(icon, tk);
	fputs(" -title ", tk);
	fputs(title, tk);
	fputs(" -message \"", tk);
	fputs(message, tk);
	fputs("\" \n", tk);
	fclose(tk);
	return 0;
ends

function (in entry,fix $ * id,fix $ * background,fix $ * foreground,fix $ * textvar,fix $ * width,fix $ * justify)
	tk = fopen("Tk.tcl", "a+");
	fputs("entry ", tk);
	fputs(id, tk);
	fputs(" -background ", tk);
	fputs(background, tk);
	fputs(" -foreground ", tk);
	fputs(foreground, tk);
	fputs(" -width ", tk);
	fputs(width, tk);
	fputs(" -textvariable i", tk);
	fputs(" -justify ", tk);
	fputs(justify, tk);
	fputs("\n", tk);
	fputs("pack ", tk);
	fputs(id, tk);
	fputs("\n", tk);
	fputs("set i ", tk);
	fputs(textvar, tk);
	fclose(tk);
	return 0;
ends

function (out run)
	system("wish Tk.tcl");
	remove("Tk.tcl");
ends

